(function(){'use strict';class CSSCalculator{constructor(){this.form=document.getElementById('cssCalculatorForm');this.time400Input=document.getElementById('time400');this.time200Input=document.getElementById('time200');this.calculateBtn=document.getElementById('calculateBtn');this.resetBtn=document.getElementById('resetBtn');this.resultsContainer=document.getElementById('cssResults');this.cssValueEl=document.getElementById('cssValue');this.cssPaceEl=document.getElementById('cssPace');this.zonesTableEl=document.getElementById('zonesTable');this.trainingZones=[{name:'Zone 1: Recovery',min:115,max:125,description:'Easy aerobic, active recovery'},{name:'Zone 2: Aerobic',min:105,max:115,description:'Base endurance, fat burning'},{name:'Zone 3: Tempo',min:100,max:105,description:'Sustained aerobic pace'},{name:'Zone 4: Threshold',min:95,max:100,description:'CSS pace, lactate threshold'},{name:'Zone 5: VOâ‚‚max',min:90,max:95,description:'High intensity intervals'},{name:'Zone 6: Anaerobic',min:85,max:90,description:'Short intervals, lactate tolerance'},{name:'Zone 7: Sprint',min:0,max:85,description:'Maximum effort, power development'}];this.init();}
init(){if(!this.form)return;this.attachEventListeners();this.loadSavedData();}
attachEventListeners(){this.form.addEventListener('submit',(e)=>{e.preventDefault();this.calculate();});this.form.addEventListener('reset',()=>{this.clearResults();this.clearErrors();localStorage.removeItem('css_calculator_data');});[this.time400Input,this.time200Input].forEach(input=>{input.addEventListener('input',(e)=>this.formatTimeInput(e));input.addEventListener('blur',(e)=>this.validateTimeInput(e));});}
formatTimeInput(e){let value=e.target.value.replace(/[^0-9:]/g,'');if(value.length===1&&parseInt(value)>5){value=value+':';}else if(value.length===2&&!value.includes(':')){value=value+':';}
e.target.value=value;}
validateTimeInput(e){const input=e.target;const value=input.value.trim();const errorEl=document.getElementById(input.id+'-error');this.clearError(input);if(!value)return true;const timeRegex=/^([0-9]{1,2}):([0-5][0-9])$/;const match=value.match(timeRegex);if(!match){this.showError(input,'Invalid format. Use mm:ss (e.g., 6:08)');return false;}
const minutes=parseInt(match[1]);const seconds=parseInt(match[2]);const totalSeconds=minutes*60+seconds;const is400=input.id==='time400';if(is400&&(totalSeconds<180||totalSeconds>900)){this.showError(input,'400m time should be between 3:00 and 15:00');return false;}
if(!is400&&(totalSeconds<60||totalSeconds>450)){this.showError(input,'200m time should be between 1:00 and 7:30');return false;}
return true;}
showError(input,message){const errorEl=document.getElementById(input.id+'-error');input.classList.add('error');input.setAttribute('aria-invalid','true');if(errorEl){errorEl.textContent=message;}}
clearError(input){const errorEl=document.getElementById(input.id+'-error');input.classList.remove('error');input.removeAttribute('aria-invalid');if(errorEl){errorEl.textContent='';}}
clearErrors(){[this.time400Input,this.time200Input].forEach(input=>{this.clearError(input);});}
parseTimeToSeconds(timeStr){const match=timeStr.match(/^([0-9]{1,2}):([0-5][0-9])$/);if(!match)return null;const minutes=parseInt(match[1]);const seconds=parseInt(match[2]);return minutes*60+seconds;}
formatSecondsToTime(totalSeconds){const minutes=Math.floor(totalSeconds/60);const seconds=Math.round(totalSeconds%60);return`${minutes}:${seconds.toString().padStart(2,'0')}`;}
calculate(){this.clearErrors();const time400Valid=this.validateTimeInput({target:this.time400Input});const time200Valid=this.validateTimeInput({target:this.time200Input});if(!time400Valid||!time200Valid){return;}
const time400Str=this.time400Input.value.trim();const time200Str=this.time200Input.value.trim();if(!time400Str||!time200Str){if(!time400Str)this.showError(this.time400Input,'Required field');if(!time200Str)this.showError(this.time200Input,'Required field');return;}
const t400=this.parseTimeToSeconds(time400Str);const t200=this.parseTimeToSeconds(time200Str);if(t400===null||t200===null){return;}
const pace400per100=t400/4;const pace200per100=t200/2;if(pace200per100>=pace400per100){this.showError(this.time200Input,'200m pace must be faster than 400m pace. Check your times.');return;}
const d1=200;const d2=400;const cssMetersPerSecond=(d2-d1)/(t400-t200);const cssPacePer100m=100/cssMetersPerSecond;this.displayResults(cssMetersPerSecond,cssPacePer100m);this.saveData({time400:time400Str,time200:time200Str});}
displayResults(cssMS,cssPace){this.resultsContainer.style.display='block';this.cssValueEl.textContent=`${cssMS.toFixed(3)}m/s`;this.cssPaceEl.textContent=this.formatSecondsToTime(cssPace);this.generateZonesTable(cssPace);this.resultsContainer.scrollIntoView({behavior:'smooth',block:'nearest'});}
generateZonesTable(cssPace){const table=document.createElement('table');table.className='zones-table';const thead=document.createElement('thead');thead.innerHTML=`<tr><th>Zone</th><th>%of CSS</th><th>Pace Range</th><th>Purpose</th></tr>`;table.appendChild(thead);const tbody=document.createElement('tbody');this.trainingZones.forEach((zone,index)=>{const minPace=(cssPace*zone.min)/100;const maxPace=(cssPace*zone.max)/100;const row=document.createElement('tr');row.className=`zone-${index+1}`;row.innerHTML=`<td><strong>${zone.name}</strong></td><td>${zone.min===0?'<85':zone.min+'-'+zone.max}%</td><td>${this.formatSecondsToTime(maxPace)}-${this.formatSecondsToTime(minPace)}</td><td>${zone.description}</td>`;tbody.appendChild(row);});table.appendChild(tbody);this.zonesTableEl.innerHTML='';this.zonesTableEl.appendChild(table);}
clearResults(){this.resultsContainer.style.display='none';this.cssValueEl.textContent='--';this.cssPaceEl.textContent='--';this.zonesTableEl.innerHTML='';}
saveData(data){try{localStorage.setItem('css_calculator_data',JSON.stringify(data));}catch(e){console.error('Failed to save calculator data:',e);}}
loadSavedData(){try{const savedData=localStorage.getItem('css_calculator_data');if(savedData){const data=JSON.parse(savedData);if(data.time400)this.time400Input.value=data.time400;if(data.time200)this.time200Input.value=data.time200;}}catch(e){console.error('Failed to load saved data:',e);}}}
function initCalculator(){const calculator=new CSSCalculator();}
if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',initCalculator);}else{initCalculator();}})();