(function(){'use strict';if(!('IntersectionObserver'in window)){console.log('IntersectionObserver not supported, loading all images immediately');loadAllImages();return;}
const imageObserver=new IntersectionObserver(function(entries,observer){entries.forEach(function(entry){if(entry.isIntersecting){const img=entry.target;loadImage(img);observer.unobserve(img);}});},{rootMargin:'50px 0px',threshold:0.01});function loadImage(img){const src=img.getAttribute('src');if(!src||img.classList.contains('loaded')){return;}
const tempImg=new Image();tempImg.onload=function(){img.classList.add('loaded');img.removeAttribute('loading');};tempImg.onerror=function(){console.error('Failed to load image:',src);img.classList.add('error');};tempImg.src=src;}
function loadAllImages(){const images=document.querySelectorAll('.lazy-image');images.forEach(loadImage);}
function init(){const lazyImages=document.querySelectorAll('.lazy-image');lazyImages.forEach(function(img){if(img.complete&&img.naturalHeight!==0){img.classList.add('loaded');}else{imageObserver.observe(img);}});console.log(`Lazy loading initialized for ${lazyImages.length}images`);}
if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',init);}else{init();}
window.reinitLazyLoad=init;})();